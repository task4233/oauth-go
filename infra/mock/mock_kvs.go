// Code generated by MockGen. DO NOT EDIT.
// Source: kvs.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKVS is a mock of KVS interface.
type MockKVS struct {
	ctrl     *gomock.Controller
	recorder *MockKVSMockRecorder
}

// MockKVSMockRecorder is the mock recorder for MockKVS.
type MockKVSMockRecorder struct {
	mock *MockKVS
}

// NewMockKVS creates a new mock instance.
func NewMockKVS(ctrl *gomock.Controller) *MockKVS {
	mock := &MockKVS{ctrl: ctrl}
	mock.recorder = &MockKVSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVS) EXPECT() *MockKVSMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKVS) Get(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVSMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVS)(nil).Get), key)
}

// Set mocks base method.
func (m *MockKVS) Set(key string, value map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKVSMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKVS)(nil).Set), key, value)
}
